{{- if and .Values.apiEnabled (not .Values.auth.api.existingSecret) -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "common.secrets.name" (dict "existingSecret" .Values.auth.api.existingSecret "defaultNameSuffix" "api" "context" $) }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
      {{- include "common.tplvalues.render" (dict "value" .Values.commonLabels "context" $) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" (dict "value" .Values.commonAnnotations "context" $) | nindent 4 }}
  {{- end }}
type: Opaque
data:
  {{/* api secrets including username are generated if not set in values or used from an existing secret */}}
  api-username: {{ include "common.secrets.passwords.manage" (dict "secret" ( include "common.names.fullname" .) "key" "api-username" "providedValues" (list "auth.api.username") "length" 6 "context" $) }}
  api-password: {{ include "common.secrets.passwords.manage" (dict "secret" ( include "common.names.fullname" .) "key" "api-password" "providedValues" (list "auth.api.password") "length" 12 "strong" true "context" $) }}
  api-jwtsecret: {{ include "common.secrets.passwords.manage" (dict "secret" ( include "common.names.fullname" .) "key" "api-jwtsecret" "providedValues" (list "auth.api.jwtSecretKey") "length" 32 "context" $) }}
{{- end }}